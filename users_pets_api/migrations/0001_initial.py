# Generated by Django 4.1.7 on 2023-03-01 18:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(db_column='phone_number', max_length=128, region=None, unique=True)),
                ('city', models.CharField(db_column='city', max_length=75)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'person',
                'ordering': ['phone_number', 'city', 'last_login'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('person', models.ForeignKey(db_column='person_id', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'owner',
                'ordering': ['person', 'pet'],
            },
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.AutoField(db_column='id', editable=False, primary_key=True, serialize=False, unique=True)),
                ('date_of_birth', models.DateTimeField(db_column='date_of_birth')),
                ('gender', models.CharField(choices=[('F', 'Female'), ('M', 'Male')], db_column='gender', max_length=1)),
                ('weight', models.FloatField(db_column='weight', validators=[django.core.validators.MinValueValidator(0.0)])),
                ('breed', models.CharField(db_column='breed', max_length=50)),
                ('deceased_date', models.DateTimeField(blank=True, db_column='deceased_date', null=True)),
                ('owners', models.ManyToManyField(related_name='owners', through='users_pets_api.Owner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pet',
                'ordering': ['date_of_birth', 'deceased_date', 'breed', 'gender', 'weight', 'id'],
            },
        ),
        migrations.AddField(
            model_name='owner',
            name='pet',
            field=models.ForeignKey(db_column='pet_id', on_delete=django.db.models.deletion.CASCADE, to='users_pets_api.pet'),
        ),
        migrations.AddConstraint(
            model_name='owner',
            constraint=models.UniqueConstraint(fields=('person', 'pet'), name='unique_person_id_pet_id'),
        ),
    ]
